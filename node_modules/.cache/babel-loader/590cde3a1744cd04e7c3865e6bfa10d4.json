{"ast":null,"code":"var _jsxFileName = \"/home/dev01/Documents/projects/escola-js/jobs/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Box, CircularProgress, Grid, ThemeProvider } from \"@material-ui/core\";\nimport Header from \"./componets/Header\";\nimport theme from './theme/theme';\nimport SearchBar from \"./componets/SearchBar\";\nimport JobCards from \"./componets/Job/JobCards\";\nimport NewJobModal from \"./componets/Job/NewJobModal\";\nimport { firestore, app } from \"./firebase/config\";\nexport default (() => {\n  const [jobs, setJobs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [newJobMobal, setNewJobMobal] = useState(false);\n\n  const fetchJobs = async () => {\n    setLoading(true);\n    const req = await firestore.collection('jobs').orderBy('postedOn', 'desc').get();\n    const tempJobs = req.docs.map(job => ({ ...job.data(),\n      id: job.id,\n      postedOn: job.data().postedOn.toDate()\n    }));\n    setJobs(tempJobs);\n    setLoading(false);\n  };\n\n  const fetchJobsCustom = async jobSearch => {\n    setLoading(true);\n    const req = await firestore.collection('jobs').orderBy('postedOn', 'desc').where(\"location\", '===', jobSearch.location).where(\"type\", '===', jobSearch.type).get();\n    const tempJobs = req.docs.map(job => ({ ...job.data(),\n      id: job.id,\n      postedOn: job.data().postedOn.toDate()\n    }));\n    setJobs(tempJobs);\n    setLoading(false);\n  };\n\n  const postJob = async jobDetails => {\n    await firestore.collection('jobs').add({ ...jobDetails,\n      postedOn: app.firestore.FieldValue.serverTimestamp()\n    });\n    fetchJobs();\n  };\n\n  useEffect(() => {\n    fetchJobs();\n  }, []);\n  return /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    openNewJobModal: () => setNewJobMobal(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(NewJobModal, {\n    closeModal: () => setNewJobMobal(false),\n    newJobMobal: newJobMobal,\n    postJob: postJob,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    mb: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    xs: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SearchBar, {\n    fetchJobsCustom: fetchJobsCustom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }), loading ? /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    justifyContent: \"center\",\n    py: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 75\n    }\n  }), \" \") : jobs.map(job => /*#__PURE__*/React.createElement(JobCards, Object.assign({\n    key: job.id\n  }, job, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 31\n    }\n  })))))));\n});","map":{"version":3,"sources":["/home/dev01/Documents/projects/escola-js/jobs/src/App.js"],"names":["React","useState","useEffect","Box","CircularProgress","Grid","ThemeProvider","Header","theme","SearchBar","JobCards","NewJobModal","firestore","app","jobs","setJobs","loading","setLoading","newJobMobal","setNewJobMobal","fetchJobs","req","collection","orderBy","get","tempJobs","docs","map","job","data","id","postedOn","toDate","fetchJobsCustom","jobSearch","where","location","type","postJob","jobDetails","add","FieldValue","serverTimestamp"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Box, CircularProgress, Grid, ThemeProvider } from \"@material-ui/core\";\nimport Header from \"./componets/Header\";\nimport theme from './theme/theme';\nimport SearchBar from \"./componets/SearchBar\";\nimport JobCards from \"./componets/Job/JobCards\";\nimport NewJobModal from \"./componets/Job/NewJobModal\";\nimport { firestore, app } from \"./firebase/config\";\n\nexport default () => {\n  const [jobs, setJobs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [newJobMobal, setNewJobMobal] = useState(false);\n\n  const fetchJobs =  async () => {\n    setLoading(true);\n    const req = await firestore.collection('jobs').orderBy('postedOn', 'desc').get();\n    const tempJobs = req.docs.map((job) => ({ ...job.data(), id: job.id, postedOn: job.data().postedOn.toDate() }));\n    \n    setJobs(tempJobs);\n    setLoading(false);\n  }\n\n  const fetchJobsCustom = async jobSearch => {\n\n    setLoading(true);\n    const req = await firestore\n      .collection('jobs')\n      .orderBy('postedOn', 'desc')\n      .where(\"location\",'===', jobSearch.location)\n      .where(\"type\",'===', jobSearch.type)\n      .get();\n    const tempJobs = req.docs.map((job) => ({ ...job.data(), id: job.id, postedOn: job.data().postedOn.toDate() }));\n    \n    setJobs(tempJobs);\n    setLoading(false);\n\n  }\n\n  const postJob = async jobDetails => {\n    await firestore.collection('jobs').add({\n      ...jobDetails,\n      postedOn: app.firestore.FieldValue.serverTimestamp()\n    })\n    fetchJobs();  \n  }\n\n  useEffect(() =>{\n    fetchJobs();\n  }, [])\n\n  return (\n  <ThemeProvider theme={theme}>\n    <Header openNewJobModal={() => setNewJobMobal(true)} />\n    <NewJobModal \n      closeModal={\n        () => setNewJobMobal(false)\n      } \n      newJobMobal={newJobMobal}  \n      postJob={postJob} \n    />\n    <Box mb={3}>\n      <Grid container justify=\"center\">\n        <Grid xs={10}>\n          <SearchBar fetchJobsCustom={fetchJobsCustom} />\n\n          {\n            loading ? <Box display=\"flex\" justifyContent=\"center\" py={4} ><CircularProgress /> </Box>\n            : jobs.map(job => <JobCards key={job.id} {...job} />)\n          }\n          \n          \n        </Grid>\n      </Grid>\n    </Box>\n  </ThemeProvider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}